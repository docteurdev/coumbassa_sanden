{
  "resolvedId": "C:/Users/HP/Desktop/projets/next/000/update/coumbassa_sanden/node_modules/uuid/dist/esm-browser/v1.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import rng from './rng.js';\nimport { unsafeStringify } from './stringify.js'; // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || unsafeStringify(b);\n}\n\nexport default v1;",
      "start": 1709123950071,
      "end": 1709123950446,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709123950446,
      "end": 1709123950446,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709123950446,
      "end": 1709123950446,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709123950446,
      "end": 1709123950446,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709123950447,
      "end": 1709123950447,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709123950447,
      "end": 1709123950447,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709123950447,
      "end": 1709123950447,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709123950447,
      "end": 1709123950447,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709123950447,
      "end": 1709123950447,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709123950447,
      "end": 1709123950447,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709123950447,
      "end": 1709123950447,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709123950447,
      "end": 1709123950447,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709123950447,
      "end": 1709123950447,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709123950447,
      "end": 1709123950447,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709123950447,
      "end": 1709123950447,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709123950447,
      "end": 1709123950447,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709123950447,
      "end": 1709123950447,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709123950447,
      "end": 1709123950447,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709123950447,
      "end": 1709123950447,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709123950447,
      "end": 1709123950447,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709123950447,
      "end": 1709123950447,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709123950447,
      "end": 1709123950449,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709123950449,
      "end": 1709123950449,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709123950449,
      "end": 1709123950449,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709123950449,
      "end": 1709123950449,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709123950449,
      "end": 1709123950449,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709123950449,
      "end": 1709123950449,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709123950449,
      "end": 1709123950449,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709123950449,
      "end": 1709123950450,
      "order": "post"
    },
    {
      "name": "quasar:directive",
      "start": 1709123950450,
      "end": 1709123950450,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709123950450,
      "end": 1709123950450,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709123950450,
      "end": 1709123950450,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709123950450,
      "end": 1709123950450,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709123950450,
      "end": 1709123950450,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709123950450,
      "end": 1709123950452,
      "order": "normal"
    }
  ]
}
